apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 24
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.brandonhogan.liftscout"
        minSdkVersion 21
        targetSdkVersion 24

        // Fetch the version according to git latest tag
        def longVersionName = "git -C ${rootDir} describe --tags --long".execute().text.trim()

        // No tag found
        if (longVersionName.isEmpty())
            throw new GradleException("\n--------" + "GRADLE ERROR--------"
                    + "\n"
                    + " - Could not find a valid tag associated to this build. Tag versioning " +
                    "must be in the Major.Minor.Patch format."
                    + "\n"
                    + "Example : 1.2.3")


        def branchName = "git -C ${rootDir} rev-parse --abbrev-ref HEAD".execute().text.trim()
        def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
        def(versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')

        if (versionMajor == null  || versionMinor == null || versionPatch == null) {
            throw new GradleException("\n--------" + "GRADLE ERROR--------"
                    + "\n"
                    + " - Could not find a valid tag associated to this build. Tag versioning " +
                    "must be in the Major.Minor.Patch format."
                    + "\n"
                    + "Example : 1.2.3")
        }

        if (!versionMajor.isNumber())
            throw new GradleException("Tag version major is not numeric. " + versionMajor)

        if (!versionMinor.isNumber())
            throw new GradleException("Tag version minor is not numeric. " + versionMinor)

        if (!versionPatch.isNumber())
            throw new GradleException("Tag version patch is not numeric. " + versionPatch)

        // Set the version name
        versionName "$branchName $versionMajor.$versionMinor.$versionPatch($versionBuild)"

        // Turn the version name into a version code
        versionCode versionMajor.toInteger() * 100000 +
                versionMinor.toInteger() * 10000 +
                versionPatch.toInteger() * 1000 +
                versionBuild.toInteger()

        // Friendly print the version output to the Gradle console
        printf("\n--------" + "VERSION DATA--------"
                + "\n"
                + "- Branch Name: " + branchName
                + "\n"
                + "- Version Code: " + versionCode
                + "\n"
                + "- Version Name: " + versionName
                + "\n"
                + "- Long Version Name: " + longVersionName
                + "\n----------------------------\n")

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.0.0'
    compile 'com.android.support:design:24.0.0'
    compile 'com.android.support:support-v13:24.0.0'
    compile 'com.android.support:cardview-v7:24.0.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.prolificinteractive:material-calendarview:1.2.0'
    compile 'cn.pedant.sweetalert:library:1.3'
    compile 'com.github.antonyt:InfiniteViewPager:v1.0.0'
    compile 'com.ToxicBakery.viewpager.transforms:view-pager-transforms:1.2.32@aar'
    //compile 'com.google.android.gms:play-services-analytics:8.4.0'
}

